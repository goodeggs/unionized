expect = require('chai').expect
moment = require 'moment'
unionized = require '../src'
validator = require 'goodeggs-json-schema-validator'

describe 'JSONSchema kitten tests', ->

  beforeEach 'clear instance', ->
    @instance = null

  describe 'an instance generated by the factory with no inputs', ->
    before 'create kitten', ->
      @kittenSchema = {
        title: "Example Test Schema"
        type: "object"
        required: ["_id", "name", "bornAt", "bornDay", "contact", "website", "cutenessPercentile", "personality", "eyeColor", "isHunter"]
        properties: {
          _id: { type: "string", format: "objectid" }
          name: { type: "string" },
          bornAt: { type: "string", format: "date-time" },
          bornDay: { type: "string", format: "date" },
          contact: { type: "string", format: "email" },
          website: { type: "string", format: "uri" },
          cutenessPercentile: { type: "integer" },
          personality: { type: "string", enum: ["friendly", "fierce", "antisocial", "changeable"] },
          eyeColor: { type: "string", default: "yellow" },
          isHunter: { type: "boolean" },
          description: {type: "string"}
        }
      }

      @factory = unionized.JSONSchemaFactory @kittenSchema

    beforeEach 'create instance', ->
      @instance = @factory.create()

    it 'validates', ->
      expect(validator.validate(@instance, @kittenSchema)).to.be.ok

    it 'can generate a string', ->
      expect(@instance.name).to.be.a 'string'

    it 'can generate a string with format objectId', ->
      expect(@instance._id).to.match /^(?=[a-f\d]{24}$)(\d+[a-f]|[a-f]+\d)/i

    it 'can generate a string with format date-time (default in 2013)', ->
      born = moment(@instance.bornAt)
      expect(born.isAfter  '2012-12-31').to.be.ok
      expect(born.isBefore '2014-01-01').to.be.ok
      expect(@instance.bornAt).to.have.length 24

    it 'can generate a string with format date (default in 2013)', ->
      born = moment(@instance.bornDay)
      expect(born.isAfter  '2012-12-31').to.be.ok
      expect(born.isBefore '2014-01-01').to.be.ok
      expect(@instance.bornDay).to.have.length 10

    it 'can generate string with format email', ->
      expect(@instance.contact).to.contain '@'

    it 'can generate string with format url', ->
      expect(@instance.website).to.contain 'http'

    it 'can generate a number', ->
      expect(@instance.cutenessPercentile).to.be.a 'number'

    it 'can generate within an enum', ->
      expect(@instance.personality in ['friendly', 'fierce', 'antisocial', 'changeable']).to.be.ok

    it 'can generate a boolean', ->
      expect(@instance.isHunter).to.be.a 'boolean'

    it 'will use provided defaults', ->
      expect(@instance.eyeColor).to.equal 'yellow'

    it 'will ignore non-required attributes', ->
      expect(@instance.description).to.be.undefined

  describe 'instantiating with unknown field', ->
    before 'create kitten', ->
      @kittenSchema = {
        "type": "object",
        "properties": {
          "name": { "type": "string" }
        },
        "required": ["name"]
      }

      @factory = unionized.JSONSchemaFactory @kittenSchema

    it 'validates', ->
      expect(=> @factory.create({age: 15})).to.throw 'Factory creation failed: Unknown property (not in schema) at /age'

  describe 'arrays', ->
    before 'create kitten', ->
      kitten2 =
        title: "Kitten2"
        type: "object"
        required: ['paws']
        properties:
          siblings:
            type: 'array'
            items:
              type: 'string'
          paws:
            type: "array"
            items:
              type: "object"
              required: ["nickname"]
              properties:
                nickname: {type: "string"}
                clawCount: {type: "number"}

      @factory = unionized.JSONSchemaFactory kitten2

    beforeEach 'create kitten', ->
      @instance = @factory.create()

    it 'can generate an array', ->
      expect(@instance.paws).to.be.an.instanceOf Array

    it 'does not generate array if not required', ->
      expect(@instance.siblings).to.equal undefined

    it 'generates required properties on array elements', ->
      expect(@instance.paws[0]).to.be.a 'object'
      expect(@instance.paws[0]).to.have.property 'nickname'
      expect(@instance.paws[0].clawCount).not.to.be.ok

  describe 'deeply-nested attributes', ->
    before 'create kitten', ->
      kitten3 = {
        "title": "Kitten2",
        "type": "object",
        "required": ['meta']
        "properties": {
          "meta": {
            "type": "object",
            "required": ["owner"]
            "properties": {
              "owner": {
                "type": "object"
                "properties": {
                  "name": {"type": "string"}
                  "age": {"type": "number"}
                }
                "required": ["name"]
              }
            }
          }
        }
      }

      @factory = unionized.JSONSchemaFactory kitten3

    beforeEach 'create instance', ->
      @instance = @factory.create()

    it 'are generated', ->
      expect(@instance?.meta?.owner?.name).to.have.length.of.at.least 1
      expect(@instance?.meta?.owner?.age).not.to.be.ok

  describe 'an instance generated with inputs', ->
    before 'create kitten', ->
      kitten4 = {
        "title": "Kitten2",
        "type": "object",
        "properties": {
          "name": {"type": "string"}
          "age": {"type": "number"}
          "meta": {
            type: "object",
            "properties": {
              "owner": {
                type: "object",
                "properties": {
                  "name": {"type": "string"}
                  "age": {"type": "integer"}
                }
              }
            }
          }
        },
        "required": ["name"]
      }

      @factory = unionized.JSONSchemaFactory kitten4

    beforeEach 'create instance', ->
      @instance = @factory.create {
        name: 'John Doe'
        meta:
          owner:
            age: 30
        'meta.owner.name': 'Joe Shmoe'
      }

    it 'respects top-level inputs', ->
      expect(@instance).to.have.property 'name', 'John Doe'

    it 'respects deeply-nested object inputs', ->
      expect(@instance?.meta?.owner?.age).to.equal 30

    it 'respects deeply-nested dot-pathed arguments', ->
      expect(@instance?.meta?.owner?.name).to.equal 'Joe Shmoe'

  describe 'extending factories', ->
    before 'create kitten', ->
      kitten5 = {
        "title": "Kitten2",
        "type": "object",
        "properties": {
          "name": {"type": "string"}
          "age": {"type": "number"}
          "description": {"type": "string"}
        },
        "required": ["name", "age"]
      }

      @factory = unionized.JSONSchemaFactory(kitten5).factory name: 'Fluffy'

    beforeEach 'create instance', ->
      @instance = @factory.create { description: 'Big ball of fluff' }

    it 'combines default attributes', ->
      expect(@instance).to.have.property 'name', 'Fluffy'
      expect(@instance).to.have.property 'age'
      expect(@instance.age).to.be.a 'number'

    it 'takes inputs', ->
      expect(@instance).to.have.property 'description', 'Big ball of fluff'

  describe 'onCreate hooks', ->
    before 'create kitten', ->
      kitten6 = {
        "title": "Kitten2",
        "type": "object",
        "properties": {
          "age": {"type": "number"}
          "humanEquivalentAge": {"type": "number"}
        },
        "required": ["age"]
      }

      @factory = unionized.JSONSchemaFactory(kitten6).onCreate (instance) ->
        instance.humanEquivalentAge = instance.age * 3
        instance

    beforeEach 'create instance', ->
      @instance = @factory.create { age: 1 }

    it 'combines default attributes', ->
      expect(@instance).to.have.property 'age', 1
      expect(@instance).to.have.property 'humanEquivalentAge', 3
