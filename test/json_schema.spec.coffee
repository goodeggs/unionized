expect = require('chai').expect
moment = require 'moment'
unionized = require '../src'

describe 'JSONSchema kitten tests', ->

  beforeEach ->
    @instance = null

  describe 'an instance generated by the factory with no inputs', ->
    before 'create factory', ->
      schema = {
        "title": "Example Test Schema",
        "type": "Object",
        "properties": {
          "name": { "type": "string" },
          "cutenessPercentile": { "type": "integer" },
          "personality": { "type": "string", "enum": ["friendly", "fierce", "antisocial", "changeable"] },
          "eyeColor": { "type": "string", "default": "yellow" },
          "isHunter": { "type": "boolean" },
          "bornAt": { "type": "string", "format": "date-time" },
          "description": "string"
        },
        "required": ["name", "cutenessPercentile", "personality", "eyeColor", "isHunter", "bornAt"]
      }

      @factory = unionized.JSONSchemaFactory schema

    beforeEach 'create instance', ->
      @instance = @factory.create()

    # it 'has an _id', ->
    #   expect(@instance._id).to.be.an.instanceOf mongoose.Types.ObjectId

    it 'can generate a string', ->
      expect(@instance.name).to.be.a 'string'

    it 'can generate a number', ->
      expect(@instance.cutenessPercentile).to.be.a 'number'

    it 'can generate within an enum', ->
      expect(@instance.personality in ['friendly', 'fierce', 'antisocial', 'changeable']).to.be.ok

    it 'can generate a boolean', ->
      expect(@instance.isHunter).to.be.a 'boolean'

    it 'can generate a date (default in 2013)', ->
      born = moment(@instance.bornAt)
      expect(born.isAfter  '2012-12-31').to.be.ok
      expect(born.isBefore '2014-01-01').to.be.ok

    it 'will use provided defaults', ->
      expect(@instance.eyeColor).to.equal 'yellow'

    it 'will ignore non-required attributes', ->
      expect(@instance.description).to.be.undefined

  describe 'arrays', ->
    before 'create factory', ->
      kitten2 = {
        "title": "Kitten2",
        "type": "Object",
        "properties": {
          "paws": {
            "type": "array",
            "items": {
              "type": "object"
              "properties": {
                "nickname": {"type": "string"}
                "clawCount": {"type": "number"}
              }
              "required": ["nickname"]
            }
          }
        }
      }

      @factory = unionized.JSONSchemaFactory kitten2

    beforeEach 'create kitten', ->
      @instance = @factory.create()

    it 'can generate an array', ->
      expect(@instance.paws).to.be.an.instanceOf Array

    it 'generates required properties on array elements', ->
      expect(@instance.paws[0]).to.be.a 'object'
      expect(@instance.paws[0]).to.have.property 'nickname'
      expect(@instance.paws[0].clawCount).not.to.be.ok

  describe 'deeply-nested attributes', ->
    before 'create factory', ->
      kitten3 = {
        "title": "Kitten2",
        "type": "Object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "owner": {
                "type": "object"
                "properties": {
                  "name": {"type": "string"}
                  "age": {"type": "number"}
                }
                "required": ["name"]
              }
            }
          }
        }
      }

      @factory = unionized.JSONSchemaFactory kitten3

    beforeEach 'create instance', ->
      @instance = @factory.create()

    it 'are generated', ->
      expect(@instance?.meta?.owner?.name).to.have.length.of.at.least 1
      expect(@instance?.meta?.owner?.age).not.to.be.ok

  describe 'an instance generated with inputs', ->
    before ->
      kitten4 = {
        "title": "Kitten2",
        "type": "Object",
        "properties": {
          "name": {"type": "string"}
          "age": {"type": "number"}
        },
        "required": ["name"]
      }

      @factory = unionized.JSONSchemaFactory kitten4

    beforeEach ->
      @instance = @factory.create {
        name: 'John Doe'
        meta:
          owner:
            age: 30
        'meta.owner.name': 'Joe Shmoe'
      }

    it 'respects top-level inputs', ->
      expect(@instance).to.have.property 'name', 'John Doe'

    it 'respects deeply-nested object inputs', ->
      expect(@instance?.meta?.owner?.age).to.equal 30

    it 'respects deeply-nested dot-pathed arguments', ->
      expect(@instance?.meta?.owner?.name).to.equal 'Joe Shmoe'

  describe 'extending factories', ->
    before ->
      kitten5 = {
        "title": "Kitten2",
        "type": "Object",
        "properties": {
          "name": {"type": "string"}
          "age": {"type": "number"}
          "description": {"type": "string"}
        },
        "required": ["name", "age"]
      }

      @factory = unionized.JSONSchemaFactory(kitten5).factory name: 'Fluffy'

    beforeEach ->
      @instance = @factory.create { description: 'Big ball of fluff' }

    it 'combines default attributes', ->
      expect(@instance).to.have.property 'name', 'Fluffy'
      expect(@instance).to.have.property 'age'
      expect(@instance.age).to.be.a 'number'

    it 'takes inputs', ->
      expect(@instance).to.have.property 'description', 'Big ball of fluff'

  describe 'onCreate hooks', ->
    before ->
      kitten6 = {
        "title": "Kitten2",
        "type": "Object",
        "properties": {
          "age": {"type": "number"}
          "humanEquivalentAge": {"type": "number"}
        },
        "required": ["age"]
      }

      @factory = unionized.JSONSchemaFactory(kitten6).onCreate (instance) ->
        instance.humanEquivalentAge = instance.age * 3
        instance

    beforeEach ->
      @instance = @factory.create { age: 1 }

    it 'combines default attributes', ->
      expect(@instance).to.have.property 'age', 1
      expect(@instance).to.have.property 'humanEquivalentAge', 3
